// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ActionInfo Variant wrapper containing the real action.
// swagger:model ActionInfo
type ActionInfo struct {

	// Enumeration indicating what type of action is contained in the payload
	// Required: true
	// Enum: [RunCommand RunAPI]
	ActionType *string `json:"action_type"`

	// payload
	Payload string `json:"payload,omitempty"`
}

// Validate validates this action info
func (m *ActionInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var actionInfoTypeActionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RunCommand","RunAPI"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		actionInfoTypeActionTypePropEnum = append(actionInfoTypeActionTypePropEnum, v)
	}
}

const (

	// ActionInfoActionTypeRunCommand captures enum value "RunCommand"
	ActionInfoActionTypeRunCommand string = "RunCommand"

	// ActionInfoActionTypeRunAPI captures enum value "RunAPI"
	ActionInfoActionTypeRunAPI string = "RunAPI"
)

// prop value enum
func (m *ActionInfo) validateActionTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, actionInfoTypeActionTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ActionInfo) validateActionType(formats strfmt.Registry) error {

	if err := validate.Required("action_type", "body", m.ActionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionTypeEnum("action_type", "body", *m.ActionType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActionInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActionInfo) UnmarshalBinary(b []byte) error {
	var res ActionInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
